import {
  HttpException,
  HttpStatus,
  Injectable,
  InternalServerErrorException,
  NotFoundException,
} from "@nestjs/common";
import { PrismaService } from "src/prisma/prisma.service";
import { DisponibilidadService } from "src/disponibilidad/disponibilidad.service";
import { GenerarOrdenDto } from "./dto/generarorden.dto";

@Injectable()
export class GenerarOrdenService {
  constructor(
    private readonly prismaService: PrismaService,
    private readonly disponibilidadService: DisponibilidadService
  ) {}

  async generarOrden(data: GenerarOrdenDto) {
    const { item, num_cdp, provee } = data;

    try {
      // === Fecha actual ===
      const hoy = new Date();
      const ano_doc = hoy.getFullYear();
      const per_doc = hoy.getMonth() + 1;
      const fecha = hoy.toISOString().split("T")[0];
      const fec_tas = fecha;

      // === Validar que el NIT exista ===
      const proveedor = await this.prismaService.$queryRawUnsafe<any[]>(`
        SELECT provee, ret_iva, ret_iva_ng, cod_pai, cod_dep, cod_ciu 
        FROM cxp_provee 
        WHERE provee = '${provee}'
      `);

      if (proveedor.length === 0) {
        throw new NotFoundException({
          Codigo: "404",
          Mensaje: `El NIT ${provee} no existe en la base de datos.`,
        });
      }

      const datosProveedor = proveedor[0];

      // === Consecutivo para num_doc ===
      const consecutivo = await this.prismaService.$queryRawUnsafe<any[]>(`
        SELECT ISNULL(MAX(CONVERT(INT, num_doc)), 0) + 1 AS num_doc
        FROM inv_inf_inv
      `);
      const num_doc = consecutivo[0].num_doc;

      // === Información del ítem ===
      const itemInfo = await this.prismaService.$queryRawUnsafe<any[]>(`
        SELECT cod_ret_com, por_ret, por_iva, por_iva_ng
        FROM inv_items
        WHERE cod_item = '${item}'
      `);
      const infoItem = itemInfo[0] || {};

      // === Información del CDP ===
      const cdpInfo = await this.prismaService.$queryRawUnsafe<any[]>(`
        SELECT ano_doc AS ano_cdp, per_doc AS per_cdp
        FROM PRE_cuedoc
        WHERE num_cdp = '${num_cdp}'
      `);
      const infoCdp = cdpInfo[0] || {};

      // === Insertar la orden (tabla puente inv_inf_inv) ===
      await this.prismaService.$queryRawUnsafe<any[]>(`
        INSERT INTO inv_inf_inv (
          ano_doc, per_doc, sub_tip, tip_doc, num_doc, reg_doc, fecha,
          vendedor, cod_suc, cod_cco, cod_cl1, cod_cl2, cod_cl3, cliente, provee,
          lista, dia_pla, ind_mp, fec_tas, tasa, obs_orc, bodega, bod_des,
          fac_pro, cod_caja, cant_uni, item, alterno, trans, cantidad,
          fac_con, cos_uni, pre_vta, por_des, por_iva, por_iva_ng,
          cod_ret, por_ret, por_com, cos_unai, fec_ent, suc_des, ind_tra,
          asig_num, ind_refac, cod_conv, conv_suc, conv_cco, conv_cl1, conv_cl2,
          conv_cl3, num_fact, ord_fact, por_adm, por_imp, por_uti, mon_adm,
          mon_imp, mon_uti, usr_ano_ped, usr_per_ped, usr_sub_ped, usr_pedido,
          usr_reg_ped, usr_tercero, ano_cdp, per_cdp, sub_cdp, num_cdp, cod_rubro,
          usr_descrip_cue, tar_rii, tar_rii_ng, pai_doc, dep_doc, ciu_doc
        ) VALUES (
          '${ano_doc}', '${per_doc}', '${data.sub_tip}', '${data.tip_doc}', '${num_doc}', '${data.reg_doc}', '${fecha}',
          '${data.vendedor}', '${data.cod_suc}', '${data.cod_cco}', '${data.cod_cl1}', '${data.cod_cl2}', '${data.cod_cl3}',
          '${data.cliente}', '${data.provee}', '${data.lista}', '${data.dia_pla}', '${data.ind_mp}', '${fec_tas}', '${data.tasa}',
          '${data.obs_orc}', '${data.bodega}', '${data.bod_des}', '${data.fac_pro}', '${data.cod_caja}', '${data.cant_uni}',
          '${data.item}', '${data.alterno}', '${data.trans}', '${data.cantidad}', '${data.fac_con}', '${data.cos_uni}',
          '${data.pre_vta}', '${data.por_des}', '${data.por_iva}', '${data.por_iva_ng}', '${data.cod_ret}', '${data.por_ret}',
          '${data.por_com}', '${data.cos_unai}', '${data.fec_ent}', '${data.suc_des}', '${data.ind_tra}', '${data.asig_num}',
          '${data.ind_refac}', '${data.cod_conv}', '${data.conv_suc}', '${data.conv_cco}', '${data.conv_cl1}', '${data.conv_cl2}',
          '${data.conv_cl3}', '${data.num_fact}', '${data.ord_fact}', '${data.por_adm}', '${data.por_imp}', '${data.por_uti}',
          '${data.mon_adm}', '${data.mon_imp}', '${data.mon_uti}', '${data.usr_ano_ped}', '${data.usr_per_ped}',
          '${data.usr_sub_ped}', '${data.usr_pedido}', '${data.usr_reg_ped}', '${data.usr_tercero}',
          '${infoCdp.ano_cdp || ano_doc}', '${infoCdp.per_cdp || per_doc}', '${data.sub_cdp}', '${data.num_cdp}',
          '${data.cod_rubro}', '${data.usr_descrip_cue}', '${data.tar_rii}', '${data.tar_rii_ng}',
          '${datosProveedor.cod_pai}', '${datosProveedor.cod_dep}', '${datosProveedor.cod_ciu}'
        )
      `);

      // === Respuesta exitosa ===
      return {
        Codigo: "200",
        Mensaje: "Orden generada con éxito",
        num_doc,
        proveedor: provee,
      };

    } catch (error) {
      console.error("Error al generar la orden:", error.message || error);

      if (error instanceof HttpException) throw error;

      throw new InternalServerErrorException({
        Codigo: "500",
        Mensaje: "Error interno al generar la orden",
        Detalle: error.message || error,
      });
    }
  }
}